import sounddevice as sd
import queue
import vosk
import json

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
WAKEWORD = "–¥–∂–∞—Ä–≤–∏—Å"
MODEL_PATH = "../model_small"  # –ø—É—Ç—å –∫ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ Vosk

# === –û—á–µ—Ä–µ–¥—å –¥–ª—è –∞—É–¥–∏–æ ===
q = queue.Queue()

def callback(indata, frames, time, status):
    if status:
        print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:", status)
    q.put(bytes(indata))  # —É RawInputStream —ç—Ç–æ —É–∂–µ bytes (int16)

def main():
    model = vosk.Model(MODEL_PATH)
    rec = vosk.KaldiRecognizer(model, 16000)

    with sd.RawInputStream(samplerate=16000, blocksize=8000, dtype="int16",
                           channels=1, callback=callback):
        print("üéô –°–∫–∞–∂–∏ '–¥–∂–∞—Ä–≤–∏—Å' –¥–ª—è —Ç–µ—Å—Ç–∞...")
        while True:
            data = q.get()
            if rec.AcceptWaveform(data):
                result = json.loads(rec.Result())
                text = result.get("text", "").lower()
                if text:
                    print("Vosk —É—Å–ª—ã—à–∞–ª:", text)
                if WAKEWORD in text:
                    print("üöÄ Wakeword —Å—Ä–∞–±–æ—Ç–∞–ª!")
                    break
            else:
                partial = json.loads(rec.PartialResult())
                if WAKEWORD in partial.get("partial", "").lower():
                    print("üöÄ Wakeword (partial) —Å—Ä–∞–±–æ—Ç–∞–ª!")
                    break

if __name__ == "__main__":
    main()
